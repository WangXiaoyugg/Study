//引入依赖的包var express = require('express');var path = require('path');var bodyParser = require('body-parser');var crypto = require('crypto');var mongoose = require('mongoose');//使用mongoose 连接服务mongoose.connect('mongodb://localhost:27017/notes');mongoose.connection.on('error',console.error.bind(console,'连接数据库失败'));//生成express实例var app = express();//设置视图的存放目录app.set('views',path.join(__dirname,'views'));app.set('view engine','ejs');//设置静态文件存放目录app.use(express.static(path.join(__dirname,'public')));//解析urlencoded 请求必备app.use(bodyParser.json());app.use(bodyParser.urlencoded({extended:true}));//引入模型并实例化var models = require('./models/models');var User = models.User;var Note = models.Note;//引入session 必备的模块var session = require('express-session');var MongoStore = require('connect-mongo')(session);app.use(session({    key:'session',    secret:'Keboard cat',    cookie:{maxAge:1000 * 60 * 60 * 24},    store:new MongoStore({        db:'notes',        mongooseCollection:mongoose.connection    }),    resave:false,    saveUninitialized:true,}));//引入检测登录的文件var checkLogin = require('./checkLogin');app.get('/',(req,res)=>{    res.render('index',{        title:'首页',    })});//在注册和登录的get请求加入已登录的判断app.get('/',checkLogin.login);app.get('/register',(req,res)=>{    res.render('register',{        title:'注册',        user:req.session.user,        page:'register'    })});app.post('/register',(req,res)=>{   var username = req.body.username;   var password = req.body.password;   var passwordRepeat = req.body.passwordRepeat;   if(password !== passwordRepeat){       console.log('两次输入不一致');       return res.redirect('/register');   }   User.findOne({username:username},(err,user)=>{       if(err){           console.log(err);           return res.redirect('/reg');       }       if(user){           console.log('用户名已存在');           return res.redirect('/reg');       }       //对密码进行md5加密       var md5 = crypto.createHash('md5');       var md5password = md5.update(password).digest('hex');       var newUser = new User({           username:username,           password:md5password,       })       newUser.save((err,doc)=>{           if(err){               console.log(err);               return res.redirect('/register');           }           console.log('注册成功');           newUser.password = null;           delete newUser.password;           req.session.user = newUser;           return res.redirect('/');       })   })});app.get('/',checkLogin.login);app.get('/login',(req,res)=>{   res.render('login',{       title:'login',       user:req.session.user,       page:'login'   })});app.post('/login',(req,res)=>{    var username = req.body.username;    var password = req.body.password;    User.findOne({username:username},(err,user)=>{        if(err){            console.log(err);            return next(err);        }        if(!user){            console.log('用户不存在');            return res.redirect('/login');        }        var md5 = crypto.createHash('md5');        var md5password = md5.update(password).digest('hex');        if(user.password !== md5password){            console.log('密码错误');            return res.redirect('/login');        }        console.log('登录成功！');        user.password = null;        delete user.password;        req.session.user = user;        return res.redirect('/');    })})//在发布笔记，笔记列表，笔记详情前加入未登录的判断app.get('/',checkLogin.noLogin);//发布笔记app.get('/post',(req,res)=>{    res.render('post',{        title:'发布',        user:req.session.user    })})app.post('/post',(req,res)=>{    var note = new Note({        title:req.body.title,        author:req.session.user.username,        tag:req.body.tag,        content:req.body.content,    });    note.save((err,doc)=>{        if(err){            console.log(err);            return res.redirect('/post')        }        console.log('文章发表成功');        return res.redirect('/');    })})//笔记列表和笔记详情app.get('/',checkLogin.noLogin);app.get('/',(req,res)=>{    Note.find({author:req.session.user.username}).exec((err,arts)=>{        if(err){            console.log(err);            return res.redirect('/');        }        res.render('index',{            title:'笔记列表',            user:req.session.user,            arts:arts,            moment:moment        })    })});//笔记详情app.get('/',checkLogin.noLogin);app.get('/detail/:id',(req,res)=>{    Note.findOne({_id:req.params._id}).exec((err,art)=>{        if(err){            console.log(err);            return res.redirect('/')        }        if(art){            res.render('detail',{                title:'笔记详情',                user:req.session.user,                art:art,                moment:moment            })        }    })})//监听端口app.listen(3000,(req,res)=>{   console.log('app is running at port 3000');});