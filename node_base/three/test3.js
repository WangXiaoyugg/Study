var http =require('http');var server = http.createServer();function  callback(req,res) {    res.writeHead(200,{'Content-Type':'text/plain'});    res.write('hello events');    console.log('hello events');    res.end();}server.on('request',callback);server.on('request',(req,res) => {    res.writeHead(200,{'Content-Type':'text/plain'});    res.write('hello wangxiaoyu');    console.log('hello wangxiaoyu');    res.end();});//移除所有的监听器callback;server.removeAllListeners('request',callback);server.on('request',(req,res) => {    res.writeHead(200,{'Content-Type':'text/plain'});    res.write('hello nodejs');    console.log('hello nodejs');    res.end();});server.listen(1337,'127.0.0.1');console.log('server running at http://127.0.0.1:1337/');/*emitter.setMaxListeners(n)可以设置同一事件的监听器最大绑定数，默认情况下，超过10个就会警告提示，这能帮我们快速找到内存泄露的地方。显然，不是所有的事件触发器都限制在10个监听器，通过这个方法可以设置，如果设置为0就是无限制。*/