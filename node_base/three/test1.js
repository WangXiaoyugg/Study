/*Node.js 中所有能发出事件的对象都是events.EventEmitter的实例，对象发出事件后，需要有响应函数进行响应处理。EventEmitter类的对象具有一系列方法可以进行事件相关操作，他们是：addListener(event,listener) / on(event,listener): 为对象的事件event添加监听器listener.once(evnet,listener): 为对象的事件event添加只响应一次的监听器listener.removeListener(event,listener): 移除一个监听器listener.removeAllListeners([listeners]): 移除与一个对象绑定的所有listener.setMaxListeners(n): 设置与一个对象绑定的监听器最多有n个。//server.setMaxListeners(10),server对象最多监听器为10个；emit(event, [arg1], [arg2], [...]): 触发事件event.listenerCount(): 查看与对象绑定的监听器的个数。 */var http =require('http');var server = http.createServer();// server.on('request',(req,res) => {//     res.writeHead(200,{'Content-Type':'text/plain'});//     res.write('hello events');//     console.log('hello events');//     res.end();// });//只执行一次的监听器server.once('request',(req,res) => {    res.writeHead(200,{'Content-Type':'text/plain'});    res.write('hello wangxiaoyu');    console.log('hello wangxiaoyu');    res.end();});server.listen(1337,'127.0.0.1');console.log('server running at http://127.0.0.1:1337/');