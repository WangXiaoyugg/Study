//Bug 或改进的地方//游戏要有边界检查//怪物也可以动,相交检查//结束一轮游戏可以弹出对话框//利用localstorage存储进度，暂停//退出游戏//播放背景音乐//帮助说明//创建游戏的舞台，也就是canvs的画布var canvas = document.createElement('canvas');var ctx = canvas.getContext('2d');canvas.width = 512;canvas.height = 480;document.body.appendChild(canvas);//游戏开始之前，我们加载3张图片；function loadImage(url,x,y) {    var img = new Image();    img.onload = function () {        ctx.drawImage(img,x,y)    };    img.src = url;}var imgUrl = [    'images/background.png',    'images/hero.png',    'images/monster.png'];//定义游戏的基本对象；var hero = {    speed:256,};var monster = {};var monsterCaught = 0;//怪物被捉到的次数//监听用户的鼠标或键盘输入;var keysDown = {};addEventListener('keydown',function (e) {    keysDown[e.keyCode] = true},false);addEventListener('keyup',function (e) {   delete keysDown[e.keyCode]},false);//开始一轮游戏，游戏结束时重置游戏；var reset = function () {    //英雄是在画布的中心    hero.x = canvas.width / 2;    hero.y = canvas.height / 2;    //怪物给定随机的位置    monster.x = 32 + (Math.random() *(canvas.width - 64));    monster.y = 32 + (Math.random() * (canvas.height - 64));};//用户正在玩或是游戏结束，我们要即使的更新游戏的对象var update = function (modifier) {    if(38 in keysDown){        hero.y -= hero.speed *modifier; //up    }    if(40 in keysDown){        hero.y += hero.speed * modifier; //down    }    if(37 in keysDown){        hero.x -= hero.speed * modifier;//left    }    if(39 in keysDown){        hero.x += hero.speed * modifier;//right    }    //怪物和英雄是否被碰到，重置游戏，怪物被捉到    if(        hero.x <= (monster.x + 32)       && monster.x <= (hero.x + 32)       && hero.y <=(monster.y + 32)       && monster.y <= (hero.y + 32)    ){        ++monsterCaught;        reset();    }};//渲染游戏的场景和物体var render = function () {    loadImage(imgUrl[0],0,0);    loadImage(imgUrl[1],hero.x,hero.y);    loadImage(imgUrl[2],monster.x,monster.y);    //分数    ctx.fillStyle = 'rgb(250,250,250)';    ctx.font = '24px Helvetica';    ctx.textAlign = 'left';    ctx.textBaseline = 'top';    ctx.fillText('Goblins caught: '+ monsterCaught,32,32);};//主函数，实现游戏的循环结构var main = function () {    var now = Date.now();    var delta = now -then;    update(delta/1000);    render();    then = now;    requestAnimationFrame(main);}var w = window;requestAnimationFrame = w.requestAnimationFrame ||    webkitRequestAnimationFrame ||    w.msRequestAnimationFrame ||    w.mozRequestAnimationFrame;//最后启动游戏var then = Date.now();reset();main();