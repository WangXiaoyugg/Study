const fs = require('fs');const http = require('http');const url = require('url');const mime = require('mime');//用于处理文件的 Content-Typemodule.exports = class StaticServer {    constructor (options){        this.currentServer = null ;// http对象        //默认的配置        this.options = {            port:3000,            host:'127.0.0.1',            filePath:'./public',            homePage:'/index.html'        };        // 把传入构造函数的参数中的值加入到options中        for (let key in options){            this.options[key] = options[key]        }    }    //服务器启动函数    run(){        let __this = this;        //通过http.createServer 创建 http 服务        this.currentServer = http.createServer((req,res)=>{            let tmpUrl = url.parse(req.url).pathname;//解析客户端请求访问的 url 地址            // 如果用户访问的是 '/' 首页，则自动指定读取首页文件，默认是 'index.html'            let reqUrl = tmpUrl === '/' ? __this.options.homePage : tmpUrl;            //组装文件地址            let filePath = __this.options.filePath + reqUrl;            console.log('filePath',filePath);            //检测文件是否存在            __this.checkFilePromise(filePath).then(()=>{                return __this.readFilePromise(filePath);            }).then((data)=>{                //文件读取成功                //发送文件数据                console.log('file data',data);                __this.sendData(res,data,reqUrl);            }).catch(()=>{                // 统一处理错误                // 文件不存在或者读取失败                __this.catch404(res);            })        }).listen(this.options.port,this.options.host,()=>{            console.log("server is running on "+ this.options.host + ':'+this.options.port);        })    }    //关闭服务    close(){        this.currentServer.close(()=>{            console.log('Server closed.')        })    }    //发送文件内容    sendData(res,data,url){        console.log('url',url);        res.writeHead(200,{'Content-Type':mime.getType(url)});        res.write(data);        res.end();    }    //捕获404错误    catch404(res){        res.writeHead(404,{'Content-Type':'text/plain'});        res.write('Error 404, Resource not found.');        res.end();    }    //使用promise包装读取文件的方法    readFilePromise(path){        return new Promise((resolve,reject)=>{            fs.readFile(path,(err,data)=>{                if(err){                    console.log('error',error);                    reject(err);                }else{                    console.log('resolve data');                    resolve(data);                }            })        })    }    // 使用 promise 包装见文件是否可读取的方法    // fs.access 用于检测文件是否可读取    checkFilePromise(path){        return new Promise((resolve,reject)=>{            fs.access(path,fs.constants.R_OK,(err)=>{                if(err){                    console.log('err',err);                    reject(err)                }else{                    console.log('success');                    resolve('success');                }            })        })    }}